name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: multitenant_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go install github.com/pressly/goose/v3/cmd/goose@latest
    
    - name: Run migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/multitenant_test?sslmode=disable
      run: |
        goose -dir sql/schema postgres "$DATABASE_URL" up
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/multitenant_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  # build:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.event_name == 'push'
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3
    
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2
    
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
    
  #   - name: Build and push
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: .
  #       push: true
  #       tags: |
  #         yourusername/multitenant-saas:latest
  #         yourusername/multitenant-saas:${{ github.sha }}
  #       cache-from: type=registry,ref=yourusername/multitenant-saas:buildcache
  #       cache-to: type=registry,ref=yourusername/multitenant-saas:buildcache,mode=max

  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging
    
  #   steps:
  #   - name: Deploy to staging
  #     run: |
  #       echo "Deploying to staging environment"
  #       # Add your staging deployment commands here

  # deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here