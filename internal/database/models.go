// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type BillingStatus string

const (
	BillingStatusPending BillingStatus = "pending"
	BillingStatusPaid    BillingStatus = "paid"
	BillingStatusOverdue BillingStatus = "overdue"
)

func (e *BillingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BillingStatus(s)
	case string:
		*e = BillingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BillingStatus: %T", src)
	}
	return nil
}

type NullBillingStatus struct {
	BillingStatus BillingStatus `json:"billing_status"`
	Valid         bool          `json:"valid"` // Valid is true if BillingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBillingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BillingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BillingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBillingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BillingStatus), nil
}

type PlanType string

const (
	PlanTypeFree    PlanType = "free"
	PlanTypeStarter PlanType = "starter"
	PlanTypePro     PlanType = "pro"
)

func (e *PlanType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlanType(s)
	case string:
		*e = PlanType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlanType: %T", src)
	}
	return nil
}

type NullPlanType struct {
	PlanType PlanType `json:"plan_type"`
	Valid    bool     `json:"valid"` // Valid is true if PlanType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlanType) Scan(value interface{}) error {
	if value == nil {
		ns.PlanType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlanType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlanType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlanType), nil
}

type UserRole string

const (
	UserRoleOwner  UserRole = "owner"
	UserRoleAdmin  UserRole = "admin"
	UserRoleMember UserRole = "member"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type ApiKey struct {
	ID             uuid.UUID        `json:"id"`
	OrganizationID uuid.UUID        `json:"organization_id"`
	Key            string           `json:"key"`
	Name           string           `json:"name"`
	IsActive       bool             `json:"is_active"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	LastUsedAt     pgtype.Timestamp `json:"last_used_at"`
}

type BillingCycle struct {
	ID             uuid.UUID        `json:"id"`
	OrganizationID uuid.UUID        `json:"organization_id"`
	PeriodStart    pgtype.Timestamp `json:"period_start"`
	PeriodEnd      pgtype.Timestamp `json:"period_end"`
	TotalRequests  int32            `json:"total_requests"`
	TotalAmount    pgtype.Numeric   `json:"total_amount"`
	Status         BillingStatus    `json:"status"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

type Organization struct {
	ID        uuid.UUID        `json:"id"`
	Name      string           `json:"name"`
	Email     string           `json:"email"`
	Plan      PlanType         `json:"plan"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type UsageRecord struct {
	ID             uuid.UUID        `json:"id"`
	OrganizationID uuid.UUID        `json:"organization_id"`
	ApiKeyID       uuid.UUID        `json:"api_key_id"`
	Endpoint       string           `json:"endpoint"`
	Method         string           `json:"method"`
	StatusCode     int32            `json:"status_code"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

type User struct {
	ID             uuid.UUID        `json:"id"`
	OrganizationID uuid.UUID        `json:"organization_id"`
	Email          string           `json:"email"`
	PasswordHash   string           `json:"password_hash"`
	Role           UserRole         `json:"role"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}
